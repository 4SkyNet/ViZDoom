Jakaś metoda inicjalizacyjna całego środowiska pewnie by się przydałą.

get_state_format() - zwraca (dla danych parametrów inicjalizacyjnych zawsze to samo) format stanu, który zwraca gra w formie listy dwu elementowej:
[image.shape, misc_vector_length]
image.shape to po prostu kształt zdjęcia, które wypłuwa silnik, np. 3 kanałowe (rgb) zdjęcie 320x200 wypluje (3,320,200) jako shape
misc_vector_length to długość wektora różnośći (np. hp, ammo itd). Więc jeśli przykładowym wyjściem bedzie sam obrazek to powinno zwrócić:
[(3,320,200),0], jeśli stanem jest obrazek +ammunicja + hp to [(3,320,200),2].
W tym momencie zakładam, że zdjęcie stanu to będzie numpy.ndarray o typie np.float32, awektor rózności tak samo (tylko inne wymiary).

get_action_format() - jak już ustaliliśmy, póki co ignorujemy myszkę więc zwraca jedynie inta, który oznacza ilość przycisków wchdozących w skłąd akcji

new_episode() - tworzy nowy epizod, zwraca stan tego epizodu zgodnie z formatem zwracanym przez get_state_format

is_finished() - zwraca True albo False w zalezności czy aktualny epizod jest skońćzony czy nie

get_state() - zwraca aktualny stan epizodu w postaci listy zgodnej ze specyfikacją z get_state_format czyli listę dwu/jedno elementową (w zależności od tego czy są inne parametry poza obrazkiem)

get_summary_reward() - zwraca sumaryczną nagrodę z danego epizodu

make_action(action)
parametry wejściowe:
	action - Akcja w postaci listy booli
return value:
	reward
	nagroda za właśnie wykonaną akcję

Funkcja powinna zupdateować wewnętrzny stan gry (kolejna klatka), wyliczyć nagrodę (reward) dla tej akcji i stanu. Zwraca następny stan (None - odpowiednik nulla - jeśli gra się skończyła)



W tym momencie api pozawala na odgrywanie jednego odcinka na raz jakoś tak:
api.initialize(...)
number_of_episodes = 10
state_format = api.get_state_format()
action_format = api.get_action_format()
...
for i in range(number_of_episodes):
	api.new_episode()
	
	while not api.is_finished():
		state = api.get_state()
		...
		next_state, reward = api.make_action(action)
		...

W przyszłości pewnie lepiej by było pozwolić na więcej odcinków (szczerze to do końca nie wiem po co, ale może na potrzeby jakiegoś testowania czy coś . . .). W tym momencie można by było zrobić tak, żę new_episode tworzy osobną instancję gry i te wszystkie funkcje wymienione wyżej odpalałoby się jakoś tak:

api.initialize(...)
state_format = api.get_state_format()
action_format = api.get_action_format()
...
number_of_episodes = 10
for i in range(number_of_episodes):
	the_episode = api.new_episode()

	while not the_episode.is_finished():
		state = the_episode.get_state()
		...
		next_state, reward = the_episode.make_action(action)
		...

Można też by było pozwolić na odpalenie kilku instancji o innych parametrach wtedy get_state_format() i get_action_format() by trzeba przesunać do epizodu. Ale to wymagałoby większej rozkminy co z parametrami itd.

Co powinno być w inicjalizacji to nie wiem, ale podejrzewam, że np rozdzielczość inputu, scenariusz, jakieś inne parametry jeśl iscenariusz jest konfigurowalny.